plugins {
  id 'java'
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.9.2'
  jerseyVersion = '3.0.3'
  jettyVersion = '11.0.7'
  hibernateVersion = '6.0.2.Final'
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jar {
  duplicatesStrategy = 'INCLUDE'
  manifest {
    attributes(
            'Main-Class': 'com.example.demo2.Main'
    )
  }
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

dependencies {
  implementation "jakarta.enterprise:jakarta.enterprise.cdi-api:3.0.0"
  implementation "jakarta.ws.rs:jakarta.ws.rs-api:3.0.0"
  implementation "jakarta.servlet:jakarta.servlet-api:5.0.0"
  implementation "org.hibernate:hibernate-core:${hibernateVersion}"

  implementation "org.glassfish.jersey.core:jersey-server:${jerseyVersion}"
  implementation "org.eclipse.jetty:jetty-servlet:${jettyVersion}"
  implementation "org.glassfish.jersey.media:jersey-media-json-jackson:${jerseyVersion}"

  implementation "org.glassfish.jersey.containers:jersey-container-servlet:${jerseyVersion}"
  implementation "org.glassfish.jersey.inject:jersey-hk2:${jerseyVersion}"
  implementation "org.glassfish.jersey.core:jersey-common:${jerseyVersion}"
  implementation "org.glassfish.jersey.containers:jersey-container-servlet-core:${jerseyVersion}"

  implementation("org.glassfish.jersey.inject:jersey-hk2:3.0.3") {
    exclude group: 'org.glassfish.hk2.external', module: 'javax.inject'
  }

  // Additional Jetty dependencies if needed
  implementation "org.eclipse.jetty:jetty-webapp:${jettyVersion}"
  implementation "org.eclipse.jetty:jetty-util:${jettyVersion}"

  testImplementation "org.junit.jupiter:junit-jupiter-api:${junitVersion}"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitVersion}"
}

test {
  useJUnitPlatform()
}
